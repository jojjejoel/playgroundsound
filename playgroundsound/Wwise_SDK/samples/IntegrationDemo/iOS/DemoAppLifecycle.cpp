/*******************************************************************************
The content of this file includes portions of the AUDIOKINETIC Wwise Technology
released in source code form as part of the SDK installer package.

Commercial License Usage

Licensees holding valid commercial licenses to the AUDIOKINETIC Wwise Technology
may use this file in accordance with the end user license agreement provided
with the software or, alternatively, in accordance with the terms contained in a
written agreement between you and Audiokinetic Inc.

  Copyright (c) 2023 Audiokinetic Inc.
*******************************************************************************/

#include "stdafx.h"

#include <AK/SoundEngine/Common/AkSoundEngine.h>    // Sound engine

#include "../WwiseProject/GeneratedSoundBanks/Wwise_IDs.h"		// IDs generated by Wwise
#include "Menu.h"
#include "IntegrationDemo.h"
#include "DemoAppLifecycle.h"
#include "AudioSessionUtils.h"

//Our game object ID.  Completely arbitrary.
#define GAME_OBJECT_AMBIANCE  100

void OnSuspendCallback(
		   AK::IAkGlobalPluginContext * in_pContext,	///< Engine context.
		   AkGlobalCallbackLocation in_eLocation,		///< Location where this callback is fired.
		   void * in_pCookie							///< User cookie passed to AK::SoundEngine::RegisterGlobalCallback().
	)
{
	DemoAppLifecycle* pDemo = static_cast<DemoAppLifecycle*>(in_pCookie);
	pDemo->SetSuspendState(in_eLocation == AkGlobalCallbackLocation_Suspend ? true : false);
}

DemoAppLifecycle::DemoAppLifecycle( Menu& in_ParentMenu ):Page( in_ParentMenu, "iOS Application Lifecycle Demo" )
{
	m_szHelp  = "This demo demonstrates how the Sound Engine reacts to various "
				"application lifecycle events. The page will display the current status "
				"of the Sound Engine and continually update it as the application evolves "
				"by using the various callbacks that it provides. "
				"Experiment by leaving this page open and manipulating the application "
				"by switching from foreground to background and vice-versa, bringing down "
				"the notification panel, and changing the audio session categories on the fly."
				"Also try receiving calls while the page is open, and play secondary audio from "
				"an external media playback application. ";
}

DemoAppLifecycle::~DemoAppLifecycle()
{
}

bool DemoAppLifecycle::Init()
{
	AK::SoundEngine::RegisterGameObj(GAME_OBJECT_AMBIANCE, "Ambiance");

	// Load the sound bank
	AkBankID bankID; // Not used
	if ( AK::SoundEngine::LoadBank( "ThreeD_Audio_Demo.bnk", bankID ) != AK_Success )
	{
		SetLoadFileErrorMessage( "ThreeD_Audio_Demo.bnk" );
		return false;
	}
	
	AK::SoundEngine::PostEvent(AK::EVENTS::PLAY_3D_AUDIO_DEMO, GAME_OBJECT_AMBIANCE);
	m_bSuspended = false;

	AKVERIFY(AK_Success == AK::SoundEngine::RegisterGlobalCallback(OnSuspendCallback, AkGlobalCallbackLocation_Suspend | AkGlobalCallbackLocation_WakeupFromSuspend, this, AkPluginTypeNone, 0, 0));

	return Page::Init();
}

void DemoAppLifecycle::Release()
{
	AK::SoundEngine::StopAll();
	AK::SoundEngine::UnregisterGameObj(GAME_OBJECT_AMBIANCE);
	AK::SoundEngine::UnloadBank( "ThreeD_Audio_Demo.bnk", NULL );

	AKVERIFY(AK_Success == AK::SoundEngine::UnregisterGlobalCallback(OnSuspendCallback, AkGlobalCallbackLocation_Suspend | AkGlobalCallbackLocation_WakeupFromSuspend));

	Page::Release();
}

void DemoAppLifecycle::Draw()
{
	Page::Draw();
	int iLineHeight = GetLineHeight(DrawStyle_Text);
	int iWidth = m_pParentMenu->GetWidth();
	int iHeight = m_pParentMenu->GetHeight();
	int iStatusWidth = (iWidth / 3); // Make it sit between the two virtual gamepad overlays
	int iStatusHeight = iHeight - (iLineHeight * 10);
	char buf[1024];
	AK_OSPRINTF(buf, 1024, "Interrupted: %s", IsAudioSessionInterrupted() ? "Yes" : "No");
	DrawTextOnScreen(buf, iStatusWidth, iStatusHeight, DrawStyle_Text);
	AK_OSPRINTF(buf, 1024, "Suspended: %s", m_bSuspended ? "Yes" : "No");
	DrawTextOnScreen(buf, iStatusWidth, iStatusHeight + iLineHeight, DrawStyle_Text);
	AK_OSPRINTF(buf, 1024, "BGM: %s", IsBackgroundMusicMuted() ? "Muted" : "Unmuted");
	DrawTextOnScreen(buf, iStatusWidth, iStatusHeight + (iLineHeight * 2), DrawStyle_Text);
}

void DemoAppLifecycle::InitControls()
{
	Page * in_pParent = this;
	AkPlatformInitSettings& pfSettings = IntegrationDemo::Instance().GetPlatformInitSettings();

	InitializeAudioSessionControls(m_Controls, this, &pfSettings);
	ButtonControl* newBtn;

	newBtn = new ButtonControl( *this );
	newBtn->SetLabel( "Change Audio Session Settings" );
	newBtn->SetDelegate( (PageMFP)&DemoAppLifecycle::ChangeAudioSession_Pressed );
	m_Controls.push_back( newBtn );
 }


void DemoAppLifecycle::ChangeAudioSession_Pressed( void*, ControlEvent* in_pEvent )
{
	AkPlatformInitSettings& pfSettings = IntegrationDemo::Instance().GetPlatformInitSettings();
	FillAudioSessionSettings(m_Controls, &pfSettings);
	AK::SoundEngine::iOS::ChangeAudioSessionProperties(pfSettings.audioSession);
}
